---
import RefLink from '@components/links/RefLink.astro'
import * as Types from '@pages/rules/exam-catalog/types'
import Text from './Text.astro'
import Heading from './Heading.astro'

interface Props {
    content: Types.Content
}

function isWeb(content: Types.Content) {
    return (
        Array.isArray(content) ||
        content.only === undefined ||
        content.only === 'web'
    )
}

function isText(content: Types.Content): content is Types.Text {
    return (
        content &&
        'text' in content &&
        (typeof content.text === 'string' || Array.isArray(content.text))
    )
}

function isParagraph(content: Types.Content): content is Types.Par {
    return (
        content &&
        'par' in content &&
        (typeof content.par === 'string' || Array.isArray(content.par))
    )
}

function isHeading(content: Types.Content): content is Types.Heading {
    return (
        content &&
        'heading' in content &&
        (typeof content.heading === 'string' ||
            Array.isArray(content.heading)) &&
        'level' in content &&
        typeof content.level === 'number'
    )
}

function isLink(content: Types.Content): content is Types.Link {
    return content && 'href' in content && 'text' in content
}

function isEnumeration(
    content: Types.Content,
): content is { enumerate: Types.Content[] } {
    return content && 'enumerate' in content
}

function isItemization(
    content: Types.Content,
): content is { itemize: Types.Content[] } {
    return content && 'itemize' in content
}

function isTable(
    content: Types.Content,
): content is { table: { head?: Types.Content[][]; body: Types.Content[][] } } {
    return content && 'table' in content
}

const { content } = Astro.props
---

<>
    {
        Array.isArray(content) ? (
            content.map((c) => <Astro.self content={c} />)
        ) : !isWeb(content) ? null : isLink(content) ? (
            <span>
                {Array.isArray(content.href) ? (
                    content.href.map((c) => <Astro.self content={c} />)
                ) : (
                    <RefLink
                        withArrow={false}
                        {...(content as Types.Link & { href: string })}
                    />
                )}
            </span>
        ) : isText(content) ? (
            <span>
                {Array.isArray(content.text) ? (
                    content.text.map((c) => <Astro.self content={c} />)
                ) : (
                    <Text {...(content as Types.Text & { text: string })} />
                )}
            </span>
        ) : isParagraph(content) ? (
            <p>
                {Array.isArray(content.par)
                    ? content.par.map((c) => <Astro.self content={c} />)
                    : content.par}
            </p>
        ) : isHeading(content) ? (
            <Heading level={content.level}>
                {Array.isArray(content.heading)
                    ? content.heading.map((c) => <Astro.self content={c} />)
                    : content.heading}
            </Heading>
        ) : isEnumeration(content) ? (
            <ol>
                {content.enumerate.map((item) => (
                    <li>
                        {Array.isArray(item) ? (
                            item.map((c) => <Astro.self content={c} />)
                        ) : (
                            <Astro.self content={item} />
                        )}
                    </li>
                ))}
            </ol>
        ) : isItemization(content) ? (
            <ul>
                {content.itemize.map((item) => (
                    <li>
                        {Array.isArray(item) ? (
                            item.map((c) => <Astro.self content={c} />)
                        ) : (
                            <Astro.self content={item} />
                        )}
                    </li>
                ))}
            </ul>
        ) : isTable(content) ? (
            <table>
                {content.table.head && (
                    <thead>
                        {content.table.head.map((row) => (
                            <tr>
                                {row.map((cell) => (
                                    <th>
                                        {Array.isArray(cell) ? (
                                            cell.map((c) => (
                                                <Astro.self content={c} />
                                            ))
                                        ) : (
                                            <Astro.self content={cell} />
                                        )}
                                    </th>
                                ))}
                            </tr>
                        ))}
                    </thead>
                )}
                <tbody>
                    {content.table.body.map((row) => (
                        <tr>
                            {row.map((cell) => (
                                <td>
                                    {Array.isArray(cell) ? (
                                        cell.map((c) => (
                                            <Astro.self content={c} />
                                        ))
                                    ) : (
                                        <Astro.self content={cell} />
                                    )}
                                </td>
                            ))}
                        </tr>
                    ))}
                </tbody>
            </table>
        ) : null
    }
</>
