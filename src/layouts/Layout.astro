---
import { getImage } from 'astro:assets'

import Menu from '@components/menu/Menu.astro'

import background from '@assets/bg.png'

interface Props {
    title: string
    bgImage?: boolean
    initFlowbite?: boolean
    /** For rendering Markdown */
    prose?: boolean
    class?: string
}

const { BASE_URL } = import.meta.env
const {
    title,
    bgImage = true,
    initFlowbite = true,
    prose = true,
    class: className = '',
    frontmatter = {},
} = Astro.props
---

<!DOCTYPE html>
<html lang="de">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <link
            rel="apple-touch-icon"
            sizes="180x180"
            href={`${BASE_URL}apple-touch-icon.png`}
        />
        <link
            rel="icon"
            type="image/png"
            sizes="32x32"
            href={`${BASE_URL}favicon-32x32.png`}
        />
        <link
            rel="icon"
            type="image/png"
            sizes="16x16"
            href={`${BASE_URL}favicon-16x16.png`}
        />
        <link rel="manifest" href={`${BASE_URL}site.webmanifest`} />
        <link
            rel="mask-icon"
            href={`${BASE_URL}safari-pinned-tab.svg`}
            color="#5bbad5"
        />
        <meta name="msapplication-TileColor" content="#da532c" />
        <meta name="theme-color" content="#ffffff" />
        <meta name="generator" content={Astro.generator} />
        <meta
            name="keywords"
            content="Taekwondo,TKD,Selbsverteidigung,Kampf,Freikampf,Kampfkunst,Kampfsport,Wusterhausen,Kyritz,Sport,Training"
        />
        <title>{title || frontmatter.title}</title>
    </head>
    <body class="antialiased mt-10 md:mt-14">
        {
            bgImage && (
                <div
                    class="fixed w-full h-full bg-center bg-no-repeat opacity-70 -z-10"
                    style={
                        `background-image: url(${
                            (
                                await getImage({
                                    src: background,
                                    format: 'avif',
                                })
                            ).src
                        })`
                    }
                />
            )
        }
        <Menu />
        <main class="container md:mx-auto py-4">
            {
                prose ? (
                    <article
                        class:list={[
                            'prose max-w-none md:prose-base lg:prose-lg dark:prose-invert prose-p:text-justify',
                            className || frontmatter.class,
                        ]}
                    >
                        <slot />
                    </article>
                ) : (
                    <slot />
                )
            }
        </main>
        <init-flowbite data-should-init={initFlowbite ? 'true' : 'false'}
        ></init-flowbite>
    </body>
</html>

<script>
    // Dont import from 'flowbite' because of auto-init side effects.
    import { initFlowbite } from 'flowbite/lib/esm/components'

    /** See https://docs.astro.build/en/guides/client-side-scripts/#pass-frontmatter-variables-to-scripts */
    class InitFlowbite extends HTMLElement {
        constructor() {
            super()
            if (this.dataset.shouldInit === 'true') {
                console.log('initializing flowbite')
                // TODO: Use CDN: https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.4/flowbite.js
                initFlowbite()
            }
        }
    }

    customElements.define('init-flowbite', InitFlowbite)
</script>

<style is:global>
    :root {
        --accent: 124, 58, 237;
        --accent-gradient: linear-gradient(
            45deg,
            rgb(var(--accent)),
            #da62c4 30%,
            white 60%
        );
        /* --color-highlight: var(); */
    }
    html {
        font-family: system-ui, sans-serif;
        background-color: #cfcfcf;
        hyphens: auto;
    }
    code {
        font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
            DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
    }
    /* nav {
        background-color: #ccffcc;
    } */
    .prose ol > li > ol {
        list-style-type: upper-roman;
    }
    .prose ol > li > ol > li > ol {
        list-style-type: lower-roman;
    }
    .prose :where(ul > li):not(:where([class~='not-prose'] *))::marker {
        color: var(--tw-prose-counters);
    }
</style>
