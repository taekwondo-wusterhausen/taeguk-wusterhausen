---
import DownloadLink from '@components/links/DownloadLink.astro'
import Layout from '@layouts/Layout.astro'

import Content from './Content.astro'
import { Search } from './Search.tsx'
import { Button as SearchButton } from './SearchComponents.tsx'
import Section from './Section.astro'
import { NormalizedSection, Section as SectionType } from './types'
import { normalizedSection, tabId } from './utils'

const sections: NormalizedSection[] = (
    (await Astro.glob('./data/*.yml')) as SectionType[]
)
    .filter(({ only = 'web' }) => only === 'web')
    .map((section) => normalizedSection(section, []))
---

<Layout title="Pr端fungskatalog" initFlowbite={false}>
    <div class="relative">
        <h1>Pr端fungskatalog</h1>
        <div class="absolute bottom-0 right-0">
            {
                /*
                Display static buton while React initializes. Will be hidden by the React component.
                */
            }
            <SearchButton id="staticSearchButton" />
            <Search client:only="react" sections={sections} />
        </div>
    </div>
    <p>
        <DownloadLink
            href="pdfs/pruefungskatalog.pdf"
            text="PDF herunterladen"
            download="Pr端fungskatalog.pdf"
        />
    </p>
    <p>
        Anforderungen und Katalog stellen lediglich eine Empfehlung des
        Vorstandes in Absprache mit dem Landespr端fungsreferenten des TVBB dar.
    </p>
    <div class="border-b border-gray-200 dark:border-gray-700 not-prose">
        <ul
            class="flex flex-wrap -mb-px text-sm font-medium text-center"
            id="tabs"
            data-tabs-toggle="#tabContents"
            role="tablist"
        >
            {
                sections.map((section) => (
                    <li class="mr-2" role="presentation">
                        <button
                            class="inline-flex p-4 border-b-2 rounded-t-lg"
                            id={tabId(section)}
                            data-tabs-target={`#${section.id}`}
                            data-popover-target={`popover-${section.id}`}
                            type="button"
                            role="tab"
                            aria-controls={section.id}
                            aria-selected="false"
                        >
                            <svg
                                aria-hidden="true"
                                class="w-3 h-3 mt-1 mr-2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="3"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                <clipPath id="cut-off">
                                    <rect x="12" y="0" width="12" height="24" />
                                </clipPath>
                                <circle
                                    cx="12"
                                    cy="12"
                                    r="11"
                                    fill={section.colors[0]}
                                />
                                <circle
                                    cx="12"
                                    cy="12"
                                    r="11"
                                    fill={section.colors[1]}
                                    clip-path="url(#cut-off)"
                                />
                            </svg>
                            {section.title}
                        </button>
                        {/* POPOVER */}
                        {section.icon && (
                            <div
                                data-popover
                                id={`popover-${section.id}`}
                                role="tooltip"
                                class="absolute z-10 invisible inline-block w-20 p-4 text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800"
                            >
                                <img
                                    src={section.icon}
                                    class="w-12 mx-auto"
                                    alt={section.title}
                                />
                                <div data-popper-arrow />
                            </div>
                        )}
                    </li>
                ))
            }
        </ul>
    </div>
    <div id="tabContents">
        {
            sections.map((section) => (
                <div
                    class="hidden relative p-4 shadow-sm rounded-lg rounded-t-none bg-gray-50 dark:bg-gray-800"
                    id={section.id}
                    role="tabpanel"
                    aria-labelledby={tabId(section)}
                >
                    <>
                        {section.content?.map((content) => (
                            <Content content={content} />
                        ))}
                    </>
                    <div
                        class="max-w-screen-lg prose prose-table:w-full hover:prose-tr:bg-slate-100"
                        data-accordion="collapse"
                        data-active-classes="bg-gray-100 dark:bg-gray-800 text-blue-500 dark:text-white"
                        data-inactive-classes="text-gray-500 dark:text-gray-400"
                    >
                        {section.sections
                            ?.filter(({ only = 'web' }) => only === 'web')
                            .map((subSection, index, subSections) => (
                                <Section
                                    {...subSection}
                                    isFirst={index === 0}
                                    isLast={index === subSections.length - 1}
                                    parentTitles={[section.title]}
                                />
                            ))}
                    </div>
                </div>
            ))
        }
    </div>
</Layout>

<script define:vars={{ sections }}>
    window.sections = sections
</script>

<script>
    import { initAccordions } from 'flowbite/lib/esm/components/accordion'
    import { initPopovers } from 'flowbite/lib/esm/components/popover'
    import { initTabs } from 'flowbite/lib/esm/components/tabs'
    import Mousetrap from 'mousetrap'

    import {
        BODY_PREFIX,
        HASH_PREFIX,
        HEADING_PREFIX,
        ID_SEPARATOR,
    } from '@components/utils'

    initTabs()
    initAccordions()
    initPopovers()

    let activeElementId: string
    /** Avoid
     * 1. scroll jumping because the hash coincidentally matches an element id.
     * 2. invalid location hashes to cause errors (i.e. when entered by the user)
     */
    if (window.location.hash.startsWith(`#${HASH_PREFIX}`)) {
        // Strip `#${HASH_PREFIX}`
        activeElementId = window.location.hash.slice(1 + HASH_PREFIX.length)
        const [tab] = activeElementId.split(ID_SEPARATOR)
        const activeTabId = `#${tab}-tab`

        // Open tab according to URL hash by triggering clicks
        if (activeElementId) {
            document.querySelector(activeTabId).dispatchEvent(
                new MouseEvent('click', {
                    view: window,
                    bubbles: true,
                    cancelable: true,
                }),
            )
        }
    }

    // Set URL hash on tab click
    document.querySelectorAll('[data-tabs-target]').forEach((tabButton) => {
        tabButton.addEventListener('click', () => {
            const idSelector = tabButton.getAttribute('data-tabs-target')
            window.location.hash = `#${HASH_PREFIX}${idSelector.slice(1)}`
        })
    })

    const triggerElements = document.querySelectorAll('[data-accordion-target]')
    // Open accordion according to URL hash by triggering clicks
    triggerElements.forEach((triggerEl) => {
        const itemId = triggerEl.getAttribute('data-accordion-target')
        const semanticId = itemId.slice(1).replace(BODY_PREFIX, '')
        if (activeElementId && activeElementId.startsWith(semanticId)) {
            triggerEl.dispatchEvent(
                new MouseEvent('click', {
                    view: window,
                    bubbles: true,
                    cancelable: true,
                }),
            )
        }
    })
    // Set URL hash on accordion open
    triggerElements.forEach((triggerEl) => {
        triggerEl.addEventListener('click', (event) => {
            if (triggerEl.getAttribute('aria-expanded') === 'true') {
                const itemId = triggerEl.getAttribute('data-accordion-target')
                const semanticId = itemId.replace(BODY_PREFIX, '')
                // Insert `HASH_PREFIX` after `semanticId`s '#'
                window.location.hash = `#${HASH_PREFIX}${semanticId.slice(1)}`
            }
        })
    })

    if (activeElementId) {
        setTimeout(() => {
            // TODO: This is undefined for 1. Dan
            document
                .querySelector(`#${HEADING_PREFIX}${activeElementId}`)
                ?.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center',
                })
        }, 50)
    }

    Mousetrap.bind(['command+f', 'ctrl+f'], () => {
        document
            .querySelector('button[data-modal-target="searchModal"]')
            .dispatchEvent(
                new MouseEvent('click', {
                    view: window,
                    bubbles: true,
                    cancelable: true,
                }),
            )
        return false // prevent default, stop bubbling
    })
</script>

<!--
Does not work :/
For this reason the search bar has type="text"
<style>
    input[type="search"]::-webkit-search-cancel-button {
        -webkit-appearance: none;
        appearance: none;
        display: none !important;
    }
</style>
-->
