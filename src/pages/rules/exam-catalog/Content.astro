---
import RefLink from '@components/links/RefLink.astro'
import Text from './Text.astro'
import Heading from './Heading.astro'
import * as Types from './types'

interface Props {
    content: Types.Content
}

function isWeb(content: Types.Content) {
    return Array.isArray(content) || content.only === undefined || content.only === "web"
}

function isText(content: Types.Content): content is Types.Text {
    return content && 'text' in content && typeof content.text === 'string'
}

function isParagraph(content: Types.Content): content is { par: string } {
    return content && 'par' in content && typeof content.par === 'string'
}

function isHeading(content: Types.Content): content is Types.Heading {
    return content && 'heading' in content && 'level' in content
}

function isLink(content: Types.Content): content is Types.Link {
    return content && 'href' in content && 'text' in content
}

function isEnumeration(
    content: Types.Content,
): content is { enumerate: Types.Content[] } {
    return content && 'enumerate' in content
}

function isItemization(
    content: Types.Content,
): content is { itemize: Types.Content[] } {
    return content && 'itemize' in content
}

function isTable(
    content: Types.Content,
): content is { table: { head?: Types.Content[][]; body: Types.Content[][] } } {
    return content && 'table' in content
}

const { content } = Astro.props
---

<>
    {
        Array.isArray(content) ? (
            content.map((c) => <Astro.self content={c} />)
        ) : !isWeb(content) ? (
            null
        ) : isLink(content) ? (
            <RefLink withArrow={false} {...content} />
        ) : isText(content) ? (
            <span>
                <Text {...content} />
            </span>
        ) : isParagraph(content) ? (
            <p>
                {Array.isArray(content.par)
                    ? content.par.map((c) => <Astro.self content={c} />)
                    : content.par}
            </p>
        ) : isHeading(content) ? (
            <Heading {...content} />
        ) : isEnumeration(content) ? (
            <ol>
                {content.enumerate.map((item) => (
                    <li>
                        {Array.isArray(item) ? (
                            item.map((c) => <Astro.self content={c} />)
                        ) : (
                            <Astro.self content={item} />
                        )}
                    </li>
                ))}
            </ol>
        ) : isItemization(content) ? (
            <ul>
                {content.itemize.map((item) => (
                    <li>
                        {Array.isArray(item) ? (
                            item.map((c) => <Astro.self content={c} />)
                        ) : (
                            <Astro.self content={item} />
                        )}
                    </li>
                ))}
            </ul>
        ) : isTable(content) ? (
            <table>
                {content.table.head && (
                    <thead>
                        {content.table.head.map((row) => (
                            <tr>
                                {row.map((cell) => (
                                    <th>
                                        {Array.isArray(cell) ? (
                                            cell.map((c) => (
                                                <Astro.self content={c} />
                                            ))
                                        ) : (
                                            <Astro.self content={cell} />
                                        )}
                                    </th>
                                ))}
                            </tr>
                        ))}
                    </thead>
                )}
                <tbody>
                    {content.table.body.map((row) => (
                        <tr>
                            {row.map((cell) => (
                                <td>
                                    {Array.isArray(cell) ? (
                                        cell.map((c) => (
                                            <Astro.self content={c} />
                                        ))
                                    ) : (
                                        <Astro.self content={cell} />
                                    )}
                                </td>
                            ))}
                        </tr>
                    ))}
                </tbody>
            </table>
        ) : null
    }
</>
